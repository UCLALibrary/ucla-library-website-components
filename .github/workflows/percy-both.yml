name: Percy (Manual) on PR

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to run Percy on"
        required: true
        type: number # helps prevent empty/NaN
      preview_url:
        description: "Netlify preview URL"
        required: true

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: percy-manual-pr-${{ github.event.inputs.pr_number }}
  cancel-in-progress: true

jobs:
  # First fetch PR metadata to decide fork vs non-fork
  get-pr-info:
    runs-on: ubuntu-latest
    outputs:
      is_fork: ${{ steps.info.outputs.is_fork }}
      merge_ref: ${{ steps.info.outputs.merge_ref }}
    steps:
      - id: info
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ github.event.inputs.pr_number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const raw = process.env.PR_NUMBER;
            if (!raw) {
              core.setFailed('Missing workflow_dispatch input "pr_number".');
              return;
            }
            const prNum = Number(raw);
            if (!Number.isInteger(prNum)) {
              core.setFailed(`Invalid pr_number: "${raw}"`);
              return;
            }

            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNum,
            });

            core.setOutput('is_fork', pr.head.repo?.fork ? 'true' : 'false');
            core.setOutput('merge_ref', `refs/pull/${pr.number}/merge`);
            core.setOutput('head_repo', pr.head.repo.full_name);
            core.setOutput('head_ref', pr.head.ref);

            core.info(`Resolved PR #${pr.number} from ${pr.head.repo.full_name}:${pr.head.ref}`);

  # Forked PR – requires environment approval
  percy-fork:
    needs: get-pr-info
    if: needs.get-pr-info.outputs.is_fork == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: percy-secrets # <-- gated environment
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.get-pr-info.outputs.merge_ref }}
          fetch-depth: 1
          persist-credentials: false

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 18.18.2
          cache: pnpm

      - run: pnpm install --frozen-lockfile --strict-peer-dependencies

      - uses: cypress-io/github-action@v5
        with:
          working-directory: packages/vue-component-library
          install: false
          start: "" # no local server; use Netlify
          wait-on: ${{ github.event.inputs.preview_url }}
          command-prefix: "percy exec -- pnpx"
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN_STORYBOOK }}
          PERCY_TARGET_BRANCH: main

  # Non-forked PR – runs without approval
  percy-internal:
    needs: get-pr-info
    if: needs.get-pr-info.outputs.is_fork == 'false'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.get-pr-info.outputs.merge_ref }}
          fetch-depth: 1
          persist-credentials: false

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 18.18.2
          cache: pnpm

      - run: pnpm install --frozen-lockfile --strict-peer-dependencies

      - uses: cypress-io/github-action@v5
        with:
          working-directory: packages/vue-component-library
          install: false
          start: ""
          wait-on: ${{ github.event.inputs.preview_url }}
          command-prefix: "percy exec -- pnpx"
        env:
          CYPRESS_baseUrl: ${{ github.event.inputs.preview_url }}
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN_STORYBOOK_VUE3X }}
          PERCY_TARGET_BRANCH: main
